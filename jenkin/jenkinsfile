pipeline {
    parameters {
        choice(name: 'TerraformAction', choices: ['apply', 'destroy'], description: 'Select terraform action to be performed')
    }

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID') // Jenkins Credentials Manager
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    agent any

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Ajeet-Chavhan/Infrastructure-automation.git'
            }
        }

        stage('Terraform Plan') {
    steps {
        sh '''
            cd terraform
            pwd
            terraform init
            echo "terraform debug"
            terraform plan -out=tfplan
            terraform show -no-color tfplan > terraform/tfplan.txt  # Ensure the file path is correct
        '''
    }
}

            steps {
                sh '''
                    cd terraform
                    pwd
                    terraform init
                    echo "terraform debug"
                    terraform plan -out=tfplan
                    terraform show -no-color tfplan > terraform/tfplan.txt
                '''
            }
        }


stage('Approval') {
    steps {
        script {
            // Read the terraform plan file generated in the previous stage
            def plan = readFile('terraform/tfplan.txt')
            
            // User input for approval
            input message: "Do you want to proceed with the Terraform action?", 
                  parameters: [
                      text(name: 'plan', description: 'Please review the plan and decide whether to continue.', defaultValue: plan)
                  ]
        }
    }
}

        stage('Creation/Destroy Stage') {
            when {
                expression {
                    return params.TerraformAction == 'apply' || params.TerraformAction == 'destroy'
                }
            }
            steps {
                script {
                    if (params.TerraformAction == 'apply') {
                        sh "cd terraform && terraform apply -input=false tfplan"
                    } else if (params.TerraformAction == 'destroy') {
                        sh "cd terraform && terraform destroy -auto-approve"
                    }
                }
            }
        }
    }
}
